<%- include('../partials/navigation.ejs') %>

<div class="flex justify-between items-center flex-wrap gap-5 py-10">
    <p class="text-xl xl:text-2xl font-semibold text-tColor2">Delivery Charge</p>

</div>


<dialog id="my_modal_6" class="modal">
    <div class="modal-box">
        <form method="dialog">
            <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
        </form>

        <div class="flex flex-col items-center justify-center">
            <h3 class="font-bold text-lg">Are you sure to delete?</h3>
            <div class="flex items-center m-4">
                <button class="btn btn-md bg-red-600 text-white px-5 mr-3">Delete</button>
                <button class="btn btn-md bg-gray-600 text-white px-5 ml-3">Cancel</button>
            </div>
        </div>




    </div>
</dialog>
<div class="mt-5">

    <div class="flex flex-col justify-around">
        <div class="w-7/12 flex justify-end ml-5">
            <button class="primary-btn" onclick="my_modal_3.showModal()">Add Delivery Charge</button>
            <dialog id="my_modal_3" class="modal">
                <div class="modal-box">

                    <form method="dialog">
                        <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
                    </form>
                    <form action="/add-charge" method="POST">
                        <h3 class="font-bold text-lg">Delivery Charge</h3>
                        <div class="flex flex-col items-center mt-4">

                            <div class="pb-5 ">
                                <p class="mb-2 text-tColor3">Location</p>
                                <input class=" w-full input input-bordered focus:outline-none focus:shadow-outline"
                                    type="text" id="location" name="location" placeholder="Location" required>

                            </div>


                            <div class="pb-5 ">
                                <p class="mb-2 text-tColor3">Charge</p>
                                <input class=" w-full input input-bordered focus:outline-none focus:shadow-outline"
                                    type="number" id="charge" name="charge" placeholder="Charge" required>

                            </div>
                            <button type="submit" id="submitButton" class="primary-btn">Submit</button>
                        </div>
                    </form>



                </div>
            </dialog>
        </div>
        <dialog id="my_modal_5" class="modal">
            <div class="modal-box">
                <form method="dialog">
                    <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
                </form>
                <form action="/update-charge" method="POST">
                    <h3 class="font-bold text-lg"> Edit Charge</h3>
                    <div class="flex flex-col items-center mt-4">

                        <div class="pb-5 ">
                            <p class="mb-2 text-tColor3">Location</p>
                            <input class=" w-full input input-bordered focus:outline-none focus:shadow-outline"
                                type="text" id="edit_location" name="edit_location" placeholder="Location" required>


                        </div>
                        <div class="pb-5 ">
                            <p class="mb-2 text-tColor3">Charge</p>
                            <input class=" w-full input input-bordered focus:outline-none focus:shadow-outline"
                                type="number" id="edit_charge" name="edit_charge" placeholder="Charge" required>
                        </div>

                        <input class=" w-full input input-bordered focus:outline-none focus:shadow-outline"
                            type="number" id="delivery_id" name="delivery_id" hidden>
                        <button type="submit" id="editSubmitButton" class="primary-btn">Submit</button>
                    </div>
                </form>



            </div>
        </dialog>
        <div class="bg-white pt-5 overflow-x-scroll md:overflow-hidden px-5">
            <table class="table-auto text-xs md:text-sm profile-table w-[90%] md:w-6/12">
                <thead>
                    <tr>
                        <th>LOCATION</th>
                        <th>DELIVERY CHARGE</th>
                        <th>ACTION</th>

                    </tr>
                </thead>

                <tbody>
                    <% for (let charge of charges) { %>

                    <tr>
                        <td class="text-tColor">
                            <%= charge.location %>
                        </td>
                        <td class="text-tColor">
                            <%= charge.charge %>
                        </td>
                        <td>
                            <div class="flex items-center gap-1 ml-100">
                                <button class="table-button btn btn-xs btn-outline btn-primary"
                                    onclick="openEditChargeModal(`<%= charge.delivery_id %>`, `<%= charge.location %>`, `<%= charge.charge %>`)">
                                    <i class="fa fa-pencil"></i>


                                    <button class="table-button btn btn-xs btn-outline btn-primary"
                                        onclick="confirmDelete(`<%= charge.delivery_id %>`)">
                                        <i class="fa fa-trash"></i>
                                    </button>

                            </div>

                        </td>

                    </tr>




                    <% } %>



                </tbody>
            </table>

        </div>

        <!-- Page Select -->
        <div class="flex flex-col justify-between gap-2 py-5 xl:flex-row xl:items-center">
            <p class="text-xs text-center xl:text-sm text-tColor">
                Show <%= paginatedCharges.length %> from <%= charges.length %> banners
            </p>

            <div
                class="grid content-center grid-flow-col gap-3 ml-auto mr-auto font-semibold scale-75 xl:scale-100 xl:mr-0 xl:text-sm text-tColor">
                <% if (page > 1) { %>
                <a class="flex items-center justify-center w-6 h-6 rounded" href="/charges?page=<%= page - 1 %>">
                    <svg width="6" height="10" viewBox="0 0 8 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M7.125 0.75L0.875 7L7.125 13.25" stroke="#84818A" stroke-width="1.5"
                            stroke-linecap="round" stroke-linejoin="round" />
                    </svg>
                </a>
                <% } %>

                <% const maxPagesToShow = 8;
                               const startPage = Math.max(1, page - Math.floor(maxPagesToShow / 2));
                               const endPage = Math.min(
                                   Math.ceil(charges.length / chargesPerPage),
                                   startPage + maxPagesToShow - 1
                               );
                    
                               for (let i = startPage; i <= endPage; i++) { %>
                <a class=" h-6 w-6 rounded flex items-center justify-center <%= i === page ? 'bg-blue-100 text-primaryColor' : '' %>"
                    href="/charges?page=<%= i %>"><%= i %></a>
                <% } %>

                <% if (page < Math.ceil(charges.length / chargesPerPage)) { %>
                <a class="flex items-center justify-center w-6 h-6 rounded" href="/charges?page=<%= page + 1 %>">
                    <svg width="6" height="10" viewBox="0 0 8 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M0.875 0.75L7.125 7L0.875 13.25" stroke="#84818A" stroke-width="1.5"
                            stroke-linecap="round" stroke-linejoin="round" />
                    </svg>
                </a>
                <% } %>
            </div>
        </div>

    </div>


</div>


</div>



</div>

</section>









<!-- Header Section Script -->
<script>
    // Menu toggle button 
    const toggleButton = document.getElementById("toggle-button");
    const toggleMenu = document.getElementById("toggle-menu");
    var toggleCounter = 1;
    toggleButton.onclick = function () {
        toggleCounter++;
        if (toggleCounter % 2 == 0) {
            toggleMenu.classList.remove("hidden");
            toggleMenu.classList.add("grid");
        }
        else {
            toggleMenu.classList.remove("grid");
            toggleMenu.classList.add("hidden");
        }
    }


</script>


<!-- Accordion Script -->
<script>
    const accordionButtons = document.querySelectorAll('.accordion-button');
    const accordionMenu = document.querySelectorAll('.menu-collapse');

    accordionButtons.forEach(button => {
        button.addEventListener('click', () => {
            const accordionCollapse = button.nextElementSibling;
            button.setAttribute('aria-expanded', button.getAttribute('aria-expanded') === 'false' ? 'true' : 'false');
            accordionCollapse.classList.toggle('hidden');
        });
    });

    // Set all accordion items to collapsed state by default
    document.querySelectorAll('.menu-collapse').forEach(collapse => {
        collapse.classList.add('hidden');
    });

    document.addEventListener('click', function (e) {
        const accordionMenu = document.getElementById('yourAccordionMenuId'); // Replace with your actual ID
        const accordionButtons = document.getElementById('yourAccordionButtonsId'); // Replace with your actual ID

        if (accordionMenu && accordionButtons) {
            if (!accordionMenu.contains(e.target) && !accordionButtons.contains(e.target)) {
                accordionMenu.classList.add('hidden');
            }
        }
    });

</script>

<script>
    const tables = document.querySelectorAll('.table-collapse');
    window.onclick = function (event) {
        for (let table of tables) {
            if (event.target == table) {
                table.classList.toggle('hidden');
            }
        }
    };
</script>



<script>
    async function openEditChargeModal(id, location, charge) {



        document.getElementById('delivery_id').value = id;
        document.getElementById("edit_location").value = location;
        document.getElementById("edit_charge").value = charge;

        console.log(id, location);

        const editModal = document.getElementById('my_modal_5');
        editModal.showModal();
    }
</script>

<script>
    function confirmDelete(ChargeId) {
        const dialog = document.getElementById('my_modal_6');
        const deleteButton = dialog.querySelector('.bg-red-600');
        const cancelButton = dialog.querySelector('.bg-gray-600');
        deleteButton.onclick = async () => {
            dialog.close();

            try {
                const response = await fetch(`/delete-charge?id=${ChargeId}`, {
                    method: 'POST',
                });

                if (response.status === 200) {

                    location.reload();
                } else {
                    console.error('Error deleting charge');
                }
            } catch (error) {
                console.error('Error:', error);
            }
        };

        cancelButton.onclick = () => {
            dialog.close();
        };

        dialog.showModal();
    }
</script>

</body>

</html>